name: Test

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - "*"

defaults:
  run:
    shell: bash
    working-directory: .

env:
  RUST_TOOLCHAIN: 1.79.0
  SOLANA_CLI_VERSION: 2.1.20
  ANCHOR_CLI_VERSION: 0.31.1
  ANCHOR_SHA: e6d7dafe12da661a36ad1b4f3b5970e8986e5321
  CARGO_TERM_COLOR: always

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Rust Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/base-setup/
    - run: cargo fmt -- --check
    - run: ./scripts/lint.sh

  test-unit:
    name: Rust Unit Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/base-setup/
    - run: cargo test --lib

  build-and-test-workspace:
    name: Build & Test Anchor Programs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/base-setup/
    - uses: ./.github/actions/build-workspace/
    - run: ./scripts/test-program.sh all --sane

  localnet-test-marginfi:
    name: Anchor Localnet Tests (Marginfi)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/base-setup/

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '23.0.0'

    - name: Cache Yarn dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/yarn
          node_modules
        key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

    - name: Install JS deps
      run: yarn install

    - name: Build transfer hook
      run: anchor build -p test_transfer_hook --no-idl

    - name: Build marginfi
      run: anchor build -p marginfi -- --no-default-features --features custom-heap

    - name: Build mocks
      run: anchor build -p mocks

    - name: Run Anchor tests (retry on segfault)
      run: |
        run_tests() {
          anchor test --skip-build 2>&1 | tee test_output.log
          return $?
        }

        run_tests; CODE=$?
        if [ $CODE -eq 139 ]; then
          echo "⚠️ Segfault—retrying once…"
          run_tests; CODE=$?
        fi

        if grep -q failing test_output.log; then exit 1; fi
        if grep -q "os error 2" test_output.log && [ $CODE -ne 139 ]; then exit 0; fi
        [ $CODE -eq 0 ]
