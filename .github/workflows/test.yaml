name: CI
on:
  push:    { branches: [main] }
  pull_request: { branches: ['*'] }

env:
  RUST_TOOLCHAIN: 1.79.0
  SOLANA_CLI_VERSION: 2.1.20
  ANCHOR_CLI_VERSION: 0.31.1
  ANCHOR_SHA: e6d7dafe12da661a36ad1b4f3b5970e8986e5321
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash
    working-directory: .

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# ── Reusable step-blocks ────────────────────────────────────────────────────────
# A: shallow checkout
x-checkout: &checkout
  - uses: actions/checkout@v3
    with:
      fetch-depth: 1

# B: just Rust (fmt, clippy, unit tests)
x-setup-rust: &setup-rust
  - uses: ./.github/actions/setup-common/
  - name: Cache Cargo registry & index
    uses: actions/cache@v3
    with:
      path: |
        ~/.cargo/registry/index
        ~/.cargo/registry/cache
        ~/.cargo/git/db
      key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

# C: Rust + Solana + Anchor (integration & localnet tests)
x-setup-solana-anchor: &setup-solana-anchor
  - uses: ./.github/actions/setup-solana-cli/
  - uses: ./.github/actions/setup-anchor-cli/

# D: Cache your Anchor build outputs (target/)
x-cache-anchor-build: &cache-anchor-build
  - name: Cache Anchor build output
    uses: actions/cache@v3
    with:
      path: target/
      key: anchor-build-${{ runner.os }}-${{ env.ANCHOR_CLI_VERSION }}-${{ env.ANCHOR_SHA }}-${{ hashFiles('programs/**/Cargo.lock') }}

# E: Cache your JS deps
x-cache-yarn: &cache-yarn
  - name: Cache Yarn
    uses: actions/cache@v3
    with:
      path: |
        ~/.cache/yarn
        node_modules
      key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

# ── Jobs ───────────────────────────────────────────────────────────────────────

jobs:
  lint:
    name: Rust Lint
    runs-on: ubuntu-latest
    steps:
      <<: *checkout
      <<: *setup-rust
      - run: cargo fmt -- --check
      - run: ./scripts/lint.sh

  test-unit:
    name: Rust Unit Tests
    runs-on: ubuntu-latest
    steps:
      <<: *checkout
      <<: *setup-rust
      - run: cargo test --lib

  build-and-test-workspace:
    name: Build & Test Anchor Programs
    runs-on: ubuntu-latest
    needs: [lint, test-unit]
    steps:
      <<: *checkout
      <<: *setup-rust
      <<: *setup-solana-anchor
      <<: *cache-anchor-build

      - uses: ./.github/actions/build-workspace/
      - run: ./scripts/test-program.sh all --sane

  fuzz:
    name: Fuzz The Marginfi Program
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./programs/marginfi/fuzz
    steps:
      <<: *checkout
      - name: Cache Rust toolchain + registry
        uses: Swatinem/rust-cache@v2
      - name: Install full rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2024-06-05
          components: rust-src
      - run: python ./generate_corpus.py
      - run: cargo install cargo-fuzz --locked
      - run: cargo +nightly-2024-06-05 \
              fuzz run lend -Zbuild-std --strip-dead-code \
              --no-cfg-fuzzing -- -max_total_time=300
      - run: echo "✅ Fuzzing completed"

  localnet-test-marginfi:
    name: Anchor Localnet Tests (Marginfi)
    runs-on: ubuntu-latest
    needs: build-and-test-workspace
    steps:
      <<: *checkout
      <<: *setup-solana-anchor
      <<: *cache-anchor-build
      <<: *cache-yarn

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with: { node-version: '23.0.0' }

      - name: Install JS deps
        run: yarn install

      - name: Build transfer-hook
        run: anchor build -p test_transfer_hook --no-idl

      - name: Build marginfi
        run: anchor build -p marginfi -- --no-default-features --features custom-heap

      - name: Build mocks
        run: anchor build -p mocks

      - name: Run Anchor tests (retry on segfault)
        run: |
          run_tests() {
            anchor test --skip-build 2>&1 | tee test_output.log
            return $?
          }
          run_tests; CODE=$?
          if [ $CODE -eq 139 ]; then
            echo "⚠️ Segfault—retrying once…"
            run_tests; CODE=$?
          fi
          if grep -q failing test_output.log; then exit 1; fi
          if grep -q "os error 2" test_output.log && [ $CODE -ne 139 ]; then exit 0; fi
          [ $CODE -eq 0 ]
